diff --git a/datasets/ACDC_test.py b/datasets/ACDC_test.py
index 9703528..d10cc1b 100644
--- a/datasets/ACDC_test.py
+++ b/datasets/ACDC_test.py
@@ -44,7 +44,6 @@ class ACDC_Dataset(Dataset):
         data=sitk.ReadImage(case['nill_path'])
         data=sitk.GetArrayFromImage(data).astype(np.float32)
         length, depth, height, width = data.shape
-
         data_start_frame_mask=sitk.ReadImage(case['anno_start_path'])
         data_start_frame_mask=sitk.GetArrayFromImage(data_start_frame_mask).astype(np.float32)
         data_start_frame_mask=np.expand_dims(data_start_frame_mask, axis=0)
@@ -106,9 +105,10 @@ class ACDC_Dataset(Dataset):
                 all_dict[count] = (self.train_dict[key])
                 count += 1
         else:
-            for key in list(self.test_dict.keys()):
-                all_dict[count] = (self.test_dict[key])
+            for key in list(self.train_dict.keys())[-10:]:
+                all_dict[count] = (self.train_dict[key])
                 count += 1
+            print(all_dict)
         return all_dict
     
     def augment(self, img_list, hflip=True, rot=True, split='val'):
diff --git a/evaluate_acdc.py b/evaluate_acdc.py
index e8375ff..429c84f 100644
--- a/evaluate_acdc.py
+++ b/evaluate_acdc.py
@@ -11,11 +11,9 @@ from torchvision.transforms import GaussianBlur
 
 from models.GPTrack_3D import RViT
 # from models.RViT_BidTag import RViT
-from models.segmentation import deeplabv3_resnet50_iekd
 from utils.tools import get_world_size, get_global_rank, get_local_rank, get_master_ip
 from utils.SSIM_metric import SSIM
 from utils.PSNR_metric import PSNR
-from datasets.phhk_dataset import PHHKDataset
 # from datasets.pah_dataset_test import Seg_PAHDataset
 from datasets.ACDC_test import ACDC_Dataset
 from monai.data import DataLoader
@@ -39,11 +37,11 @@ class Eval:
                          mlp_dim = args.latent_dim,
                          dropout = 0.1,).to(args.device)
         
-        pretrain_params = torch.load('/home/jyangcu/Pulmonary_Arterial_Hypertension/results/checkpoints/checkpoint_120.pth', map_location='cpu')
+        pretrain_params = torch.load('./results/checkpoints/checkpoint_0.pth', map_location='cpu')
         pretrain_params = {k.replace('module.', ''): v for k, v in pretrain_params.items() if k.replace('module.', '') in self.RViT.state_dict()}
         self.RViT.load_state_dict(pretrain_params)
 
-        infos = np.load('/home/jyangcu/Pulmonary_Arterial_Hypertension/datasets/dataset_utils/ACDC_info.npy', allow_pickle=True).item()
+        infos = np.load('./datasets/dataset_utils/ACDC_info.npy', allow_pickle=True).item()
         valid_dataset = ACDC_Dataset(args, infos)
         self.valid_loader = DataLoader(valid_dataset, batch_size=1, shuffle=False, num_workers=1)
         self.SSIM_metric = SSIM(window_size = 8)
@@ -57,8 +55,6 @@ class Eval:
         all_psnr, all_dice, all_ssim, lv_dice, rv_dice, myo_dice, lv_dice = [], [], [], [], [], [], []
         pbar = tqdm(self.valid_loader)
         for step, (vids, start_anno, end_anno, es_f) in enumerate(pbar):
-            if step > 0:
-                break
             hidden = torch.zeros(1, ((args.image_size[0] * args.image_size[1] * args.image_size[2]) // (args.patch_size[0] * args.patch_size[1] * args.patch_size[2])), args.latent_dim).to(args.device)
             _, inf_flow_all, neg_inf_flow_all, lag_flow, neg_lag_flow, lag_register, forward_regsiter, backward_regsiter = self.RViT(vids.to(args.device), hidden, train=False)
 
@@ -96,7 +92,7 @@ class Eval:
                 if idx == int(es_f[0]) - 1:
                     track_segments = c_mask
 
-                inf_flow_seg_plt.savefig(f'./results/flow_result_eval/inf_flow_seg_warp_{idx}.png',pad_inches=0.0)
+                # inf_flow_seg_plt.savefig(f'./results/flow_result_eval/inf_flow_seg_warp_{idx}.png',pad_inches=0.0)
                 inf_flow_seg_plt.clf()
 
             gt_segments = end_anno.transpose(2,3)
diff --git a/train_acdc.py b/train_acdc.py
index 1c42a37..5488e32 100644
--- a/train_acdc.py
+++ b/train_acdc.py
@@ -29,9 +29,9 @@ class Train:
                          mlp_dim = args.latent_dim,
                          dropout = 0.1,).to(args.device)
         
-        # pretrain_params = torch.load('/home/jyangcu/Pulmonary_Arterial_Hypertension/results/checkpoints/checkpoint_149.pth', map_location='cpu')
-        # pretrain_params = {k.replace('module.', ''): v for k, v in pretrain_params.items() if k.replace('module.', '') in self.RViT.state_dict()}
-        # self.RViT.load_state_dict(pretrain_params)
+        pretrain_params = torch.load('./results/checkpoints/checkpoint_0.pth', map_location='cpu')
+        pretrain_params = {k.replace('module.', ''): v for k, v in pretrain_params.items() if k.replace('module.', '') in self.RViT.state_dict()}
+        self.RViT.load_state_dict(pretrain_params)
         self.optimizer = torch.optim.Adam(filter(lambda x: x.requires_grad, self.RViT.parameters()), lr=args.learning_rate, betas=[args.beta1, args.beta2])
         self.scheduler = torch.optim.lr_scheduler.StepLR(self.optimizer, step_size=50, gamma=0.1)
 
@@ -245,7 +245,7 @@ if __name__ == '__main__':
     parser.add_argument('--beta2', type=float, default=0.99, help='Adam beta param (default: 0.999)')
     parser.add_argument('--clip-grad', type=bool, default=True, help='perform gradient clipping in training (default: False)')
 
-    parser.add_argument('--enable_GPUs_id', type=list, default=[5], help='The number and order of the enable gpus')
+    parser.add_argument('--enable_GPUs_id', type=list, default=[6], help='The number and order of the enable gpus')
     parser.add_argument('--wandb', type=bool, default=False, help='Enable Wandb')
 
     args = parser.parse_args()
diff --git a/utils/__pycache__/PSNR_metric.cpython-38.pyc b/utils/__pycache__/PSNR_metric.cpython-38.pyc
index ec92af8..6fd937f 100644
Binary files a/utils/__pycache__/PSNR_metric.cpython-38.pyc and b/utils/__pycache__/PSNR_metric.cpython-38.pyc differ
diff --git a/utils/__pycache__/SSIM_metric.cpython-38.pyc b/utils/__pycache__/SSIM_metric.cpython-38.pyc
index ce06748..8e31c3b 100644
Binary files a/utils/__pycache__/SSIM_metric.cpython-38.pyc and b/utils/__pycache__/SSIM_metric.cpython-38.pyc differ
